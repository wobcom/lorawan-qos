// Code generated by go-bindata.
// sources:
// ../../migrations/1590159590_initial.sql
// ../../migrations/payload.json
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1590159590_initialSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\xe6\x96\xac\x4a\xa4\x7e\x5f\x72\x5a\x65\xa9\x1a\xa9\xda\x5d\x25\x69\xb5\x37\xe4\xc0\x40\xdc\x05\x9b\xda\x4e\x59\xfa\xeb\x2b\x8c\x43\x71\x0c\x84\x55\x73\x89\x62\x7b\xfc\x3c\xef\xcd\x1b\xe3\xc5\x02\xde\xe4\x34\x15\x44\x21\x7c\x2f\xbc\xd5\x26\xb8\xdd\x05\x10\x3c\xed\x82\xfb\xed\xfa\xe1\x1e\xd6\x5f\x80\x71\x05\xf8\x42\xa5\x92\xa0\x68\x8e\x32\x22\x19\xc6\xfb\xe5\xa5\xd8\x82\x4b\x95\x52\xb9\xf4\xbc\x48\x60\x0d\xaf\xc8\x3e\x43\x88\xf1\x37\x8d\x10\xe6\x1e\x00\xd4\x83\x10\x8f\x14\xf6\x95\x42\xa2\x37\xb3\x63\x96\x41\x21\x68\x4e\x44\x05\xcf\x58\xf9\x6d\x1c\x23\x39\xc2\x8f\xdb\xcd\xea\xeb\xed\x66\xfe\xe9\xed\x8d\x77\xd3\x0f\x1d\x46\x9c\x25\x34\x35\x27\x34\x83\x90\xc6\x20\x51\x50\x92\xb5\x87\xf8\x63\x09\x08\x4c\x50\x20\x8b\x50\x1a\x50\xbf\x03\x06\x3f\x25\x67\xfb\x66\x46\x60\xc4\x45\x8c\x71\xa3\x8c\x22\x79\x01\x25\x55\x07\x7e\x54\x7a\x06\xfe\x70\x86\x67\x47\x76\xc8\xcd\xdb\xec\xfc\x16\x49\xf3\xda\x06\xdf\x82\xd5\x0e\x1a\x76\xe1\xa1\x2a\x50\x68\x8a\xf3\x99\xc5\x71\xe6\xc3\xec\xb4\x6f\x36\x24\x47\xc1\x29\x53\x1d\xbd\xd3\x4b\x5a\x4c\x14\x23\x45\x9e\x37\xbf\xa8\x44\x35\x7f\x7c\x58\xdf\xef\xfc\x8f\x1f\xde\x7f\xbe\x69\xd6\x0f\x31\x2f\x40\x20\x31\xe8\x92\x28\x09\x32\x27\x59\x46\x99\xba\x8a\x78\x86\xcc\x6b\xa5\xd3\x7a\x8c\x2b\x97\x12\x85\x25\xa9\x8c\x68\x69\x39\xc9\xa3\x69\x39\xc1\xa2\x06\xd9\x2a\x4a\x5a\x0e\xd7\x44\x8b\x3c\xac\xb1\x49\x6d\xa4\x62\xe6\xc0\xab\x08\xde\x24\x3a\x59\x6f\x8b\xeb\xb8\xe0\x0c\x55\xc9\xc5\x73\x28\x15\x39\xa9\xa2\xc4\xc5\xa6\x9d\x6a\xd4\xde\xfa\x0d\x69\x94\xac\x98\x02\xca\x14\xa6\x28\x8c\x6a\x52\xd2\xae\x91\x99\xe8\x8c\x12\x81\xbf\x8e\xc8\xa2\xca\xde\x13\x8b\x33\xaf\x9b\x22\xdb\x41\xa6\x1b\xed\xd3\x5e\x5f\xa3\xc5\x02\x12\x2e\x90\xa6\xac\x2e\x13\xb8\x75\xea\x21\xdb\x54\xc5\x0d\xed\x47\x74\x5b\xcd\x15\xdb\x20\xba\xa1\xae\x91\x74\x6d\xcf\x7c\x34\x62\xa4\xae\x3b\xc6\x7d\x54\xd2\x84\x76\x4d\xa4\xc7\xd3\xee\xfe\x01\xf3\xd4\x41\x11\x3f\x3a\x9e\xf8\xbf\x4e\x32\x79\x4d\x6e\xa5\x96\xd7\x38\x7d\xba\xa7\x32\xcc\x28\x3b\x7d\x5e\xeb\xbf\x9a\xbe\xb1\xa2\x7b\x69\xe9\x88\xcb\xd7\x96\x06\x96\x8a\x17\x06\xb8\xfe\x3b\x0e\xac\x23\xce\x81\x3b\x4b\xf2\xc0\x85\xb2\x03\xde\x9d\x02\x06\x2f\xbd\xc1\xc4\xda\x82\xeb\xf1\x50\xc1\x1d\x39\x3a\x35\x6f\xa5\xf3\xfb\x09\x9e\x87\xd6\x01\x57\xb1\x82\xc9\x78\xb2\x15\x5a\xc6\x8e\x15\xba\x4f\xb9\x3b\x5e\xb2\x7a\xe2\x6e\xf3\xf0\x68\xbf\xd0\x82\xa7\xf5\x76\xb7\xb5\x5f\x72\x5e\x2c\x78\x61\xbd\x1a\x24\x44\x44\x46\x24\xc6\xa5\xbb\xd6\x34\xba\xec\x5b\x69\x9e\x25\xd6\xca\xe9\x5b\xda\x87\x67\xdd\x45\x36\xa0\x7a\x09\x29\x4b\xb8\x35\xd7\x52\x77\x67\xb5\xe9\xfb\x8e\xf8\xe7\xdc\xbe\xd5\xb6\xaf\x96\xde\xdf\x00\x00\x00\xff\xff\x2b\x75\xcb\x8a\x09\x0b\x00\x00")

func _1590159590_initialSqlBytes() ([]byte, error) {
	return bindataRead(
		__1590159590_initialSql,
		"1590159590_initial.sql",
	)
}

func _1590159590_initialSql() (*asset, error) {
	bytes, err := _1590159590_initialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1590159590_initial.sql", size: 2825, mode: os.FileMode(384), modTime: time.Unix(1591555606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _payloadJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x5d\x6f\xa3\x46\x14\x7d\xf7\xaf\x40\xbc\x36\x58\x77\x86\xf9\x02\x69\x1f\xf0\x26\xbb\xb5\xda\x7c\x34\xf1\x2a\x52\xab\x55\x34\xc0\xe0\xd0\xb0\xd8\x6b\x26\x9b\x8d\x56\xfe\xef\x15\xd8\x38\x30\x36\xac\x23\x3b\x7d\x68\x79\xb0\xcc\xdc\x6b\xcf\x9d\x7b\xce\xe1\x5c\x7e\x0c\x2c\xcb\xb2\x6c\x39\x9f\x67\x69\x24\x75\x3a\xcb\xc7\xa7\xb6\x6f\xd9\x04\x31\xfb\x64\x2b\x76\x21\xbf\xa8\x32\xfa\xf1\x3a\x70\xce\x6e\xae\x5c\xec\x8c\x47\xe3\x9b\x3a\x31\x56\xdf\xd2\x48\x35\x72\xc0\x6d\x84\xce\x3e\x8d\xcb\x65\x37\xe2\x28\x4c\x12\x24\x42\x06\x89\x4a\x92\x3a\x63\xf1\x7d\x9c\x27\x33\xdb\xb7\xfe\xaa\xee\xcb\xeb\xc7\xe6\x5b\x95\x31\x95\x5a\x3d\xc9\xe7\x55\x7d\x52\x52\x4a\x25\xac\x2e\x04\x68\xfd\x37\x9b\xe4\xc7\x79\x96\xe6\x0f\xab\xdc\x58\x85\x28\xe2\x0c\x3b\x10\x42\xe4\x10\x02\xe0\x78\x31\x72\x1d\x1e\xe1\x58\x45\x31\x8a\x13\xc0\xe6\xef\xf3\xf5\x29\x7e\x0f\x46\xbf\x8e\x3f\x5d\xdd\x6c\xef\xb0\x28\x8a\xd4\xf6\x2d\x47\x30\x23\x90\xcd\xae\xe5\xcd\xc5\xb5\xed\x5b\x7c\x48\xb7\x62\xab\x46\xda\xbe\x71\xba\x55\x54\xea\x54\x3f\xc6\xe5\xc6\x14\x0f\x11\x05\xea\x11\x24\x28\x63\x0c\xf0\xc9\x8e\xf4\x59\x3e\xad\xf3\xbd\xa1\xc7\x28\x65\x14\x03\x61\x18\x5c\xe6\xee\xc8\x97\xd9\xe6\xef\xa1\x15\x5d\x0e\xda\xdf\x3e\xaf\x31\xd1\x35\x26\x2f\xb5\xda\xc9\x42\x7d\x7d\x54\x79\xf4\x6c\xfb\x96\x60\x82\x56\x00\xbc\x6c\x66\xc7\x8b\xb2\xfa\xea\x7e\x59\x13\xa8\x5a\xd3\x8b\x47\xb5\x5e\x48\xde\xe7\xda\xf6\x2d\x84\xb9\x4b\xea\xa5\xab\xd9\xa2\x5c\x13\x35\x61\xa4\x96\x55\xff\x47\xc1\xbb\x9a\x22\xb3\xf0\x6f\x15\xe9\x76\x39\xdf\x66\x99\x96\xd3\xf2\x48\x04\x11\x68\x6d\xab\xe5\xb4\x68\x27\xaf\x08\xea\xe8\xe7\x79\x85\x6d\xae\xf4\xd3\x6c\xf1\xe0\x7c\x9d\x15\xf6\xea\x97\x83\xe5\xe0\x6d\x05\x81\x7a\x04\x21\x93\x43\x04\x01\x20\x2a\x28\x4a\x4d\xb8\x5c\x8a\x3e\x41\xac\x65\x03\xce\x8e\x8f\xfa\xea\x12\xc4\xd5\xf5\xe5\xed\xe5\xe8\x7c\xf2\xfe\x74\x02\xec\xee\x5a\xea\x7b\xf9\x58\x98\xc9\x3a\x5d\x25\x63\xc0\xe0\x00\x75\x30\x9e\x20\xee\x13\xea\x13\x34\x24\x14\x7b\x9c\xfc\xd9\x25\x27\xd4\x64\x93\xd5\xd6\x93\x38\x48\x4f\x04\xc3\x2e\x55\x34\x55\x84\x60\xc8\x05\x13\xbb\xc4\xd6\x10\x0f\x02\xdc\x25\x9f\x93\x57\x63\x45\x98\xbb\xf5\xf0\x39\x22\x56\xa7\xb7\x17\x93\x15\x58\xe8\xee\xf6\x62\xf2\x6a\xa0\x68\x37\x50\x48\x74\x02\xe5\xb0\x03\x91\x12\xc0\xf6\x80\xca\x43\x1c\xf5\x43\xe5\xb1\xe3\x21\x85\x99\xe4\x6f\x8a\x54\x2d\x2b\x7e\x37\x51\x69\x74\x1f\x2e\x54\xaa\x55\x77\xfb\x79\x77\xfb\xbd\xe1\x36\x36\xaf\x68\x3f\xa1\xdc\x75\x39\x01\x42\x5d\x44\x7f\x8e\x83\x40\xae\x10\x1e\xe5\x44\x50\x17\xa1\x9f\x88\xe7\x68\xce\x83\x76\x3a\x8f\xbb\x9f\xf3\x70\x0f\x84\xe1\x3c\x75\xe1\x1b\xeb\x41\x41\x10\x04\x97\xe4\x34\x08\xfa\x2d\x28\x56\x99\x2c\x6b\x6a\xd5\xa2\x0a\x9d\xe6\x75\xc7\x9b\x91\x2c\xcd\xcb\x36\xe0\x66\x9f\xec\x5c\x7d\xd7\x37\x7a\x36\xaf\xfa\x09\xec\x08\x36\xf6\xc6\x3e\x06\x3d\x3e\x26\x40\xfc\x4b\x83\x9d\x12\x91\x4b\x84\x08\x1d\x12\x11\xec\x10\x37\x66\x4e\x28\x05\x72\x58\x8c\x49\x24\x42\x4f\x51\x76\xc8\x60\x87\x3a\x05\xe6\xfd\xf7\x07\x3b\x77\xef\xc1\x2e\x91\x59\x61\xe8\x8b\x08\xe0\x86\xbc\x88\xa1\xae\xf8\xfc\x2c\x0c\xc8\xc3\x1f\x5f\x82\xe0\xc3\xc7\xe9\x87\x2c\x08\xde\xf5\xaa\xac\xe5\xbf\x0d\x64\xec\xfb\xb8\xd2\x0d\x1e\x36\x6d\x7b\xbb\xe3\x8c\x90\x66\xd8\xec\x30\x87\x06\xa2\x76\x21\x75\xb1\x75\xda\xff\xf1\x3c\x29\xc3\x2d\x1f\x7a\x13\xe7\x23\x77\x1f\x64\x96\xa9\x45\x91\xa9\x50\xe5\xfb\x0d\x2b\x14\x7c\x8a\x87\x98\x78\x1c\xf7\x4c\x95\x7d\x6e\x49\x0f\x73\x4b\x10\x74\x0f\x93\xe4\xe6\xb8\x64\x99\xac\x46\xf4\x58\xda\xdd\xfd\x52\xb6\xb7\x35\xd6\x9e\xff\x62\x8d\x86\x76\x47\xd3\x7e\x47\x7c\x4a\x93\xb2\xeb\x47\xf2\xb1\xbd\xf4\xd1\xa1\x8d\x7e\x5d\x98\x9a\x68\xd4\xb6\xaf\x16\x0e\xd1\xc1\x2b\x35\xd0\xc5\x7f\xec\x23\x18\x12\x0f\x11\xda\xe2\x7f\x83\xfb\xac\xf5\xe4\x7b\x31\x31\xd1\x5a\xef\xa0\xfc\x0e\xba\x6f\xcb\xc5\xa4\x3a\x98\xfe\xd8\x22\x3a\x18\xd4\x5e\x0e\x3e\x9f\x0c\x4c\x62\xf7\xcd\x7b\x35\xa1\x97\x27\x83\x16\x91\x9b\x24\xe6\xe5\xed\x8b\xf9\x6c\xc8\x9b\x9e\x9f\x25\xc1\x2f\xe2\x62\x1e\x04\xbf\xdd\x06\xa3\x70\x6d\x3c\x26\x91\x5b\x6f\x11\xb5\x00\xd6\x5e\x03\x43\x51\x4f\x8f\x46\x73\x10\x16\x9b\xc1\xd2\xec\x0a\x45\xa4\x7e\x5d\xa9\x0d\x06\x41\x75\x84\x96\x34\x7a\x65\xb1\x1c\x2c\xff\x09\x00\x00\xff\xff\x18\x5e\x3f\x9d\xb2\x13\x00\x00")

func payloadJsonBytes() ([]byte, error) {
	return bindataRead(
		_payloadJson,
		"payload.json",
	)
}

func payloadJson() (*asset, error) {
	bytes, err := payloadJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "payload.json", size: 5042, mode: os.FileMode(384), modTime: time.Unix(1590170152, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1590159590_initial.sql": _1590159590_initialSql,
	"payload.json": payloadJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1590159590_initial.sql": &bintree{_1590159590_initialSql, map[string]*bintree{}},
	"payload.json": &bintree{payloadJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

